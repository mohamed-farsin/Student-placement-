# Student Placement Prediction - Streamlit App

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import joblib

# Title
st.title("üéì Student Placement Prediction")
st.write("Predict if a student will get placed based on academic and skill attributes.")

# Load and preprocess dataset
data = pd.read_csv("placement_data.csv")  # Replace with your dataset

le = LabelEncoder()
for column in data.select_dtypes(include=['object']).columns:
    data[column] = le.fit_transform(data[column])

X = data.drop("Placed", axis=1)  # Replace 'Placed' with your actual label column
y = data["Placed"]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Save model and scaler (optional)
# joblib.dump(model, "placement_model.pkl")
# joblib.dump(scaler, "scaler.pkl")

# User Input Form
st.sidebar.header("üìã Student Details")
input_data = []

for col in X.columns:
    val = st.sidebar.number_input(f"{col}", value=float(X[col].mean()))
    input_data.append(val)

input_array = np.array(input_data).reshape(1, -1)
input_scaled = scaler.transform(input_array)

# Predict
if st.sidebar.button("Predict Placement"):
    prediction = model.predict(input_scaled)
    result = "‚úÖ Likely to be Placed" if prediction[0] == 1 else "‚ùå Not Likely to be Placed"
    st.subheader("Prediction Result")
    st.success(result)

    # Optional model metrics
    st.subheader("Model Performance on Test Data")
    y_pred = model.predict(X_test)
    st.write("Accuracy:", accuracy_score(y_test, y_pred))
    st.text("Classification Report:\n" + classification_report(y_test, y_pred))

